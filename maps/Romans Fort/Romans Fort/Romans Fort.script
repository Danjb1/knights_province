// Knights Province dynamic script.
// Wiki available at: https://github.com/Kromster80/knights_province/wiki
// Kroms's Walkers Script  modified by Klassix




const
  HUMAN_PLAYER = 0;
  DESERTERS_PLAYER = 1;
  GAULS_PLAYER = 2;

  WAVE_INTERVAL = 1800; // Every 3 min
  WAVE_INTERVAL_LATEGAME = 2400; // Every 4 mins


var
  waveNumber: Integer;
  waveGroups: Integer;
  objWaves1: Integer; // groupcount
  objWaves2: Integer; // direction indicator
  dir: Integer;
  dir2: Integer; //Int for attack direction
  dir3: Integer;
  xcord: Integer; //selfexplaining
  ycord: Integer;
  xcord2: Integer;
  ycord2: Integer;
  xcord3: Integer;
  ycord3: Integer;
  dir_n_obj: Integer; //direction indicator for MissionObj
  dir_w_obj: Integer;
  dir_s_obj: Integer;
  dir_e_obj: Integer;
  gametime_obj: Integer;
  gametime: Integer;

  attacker_alive: Boolean; //checker for ... u know.

  north_spawn: Boolean;
  west_spawn: Boolean;
  south_spawn: Boolean;
  east_spawn: Boolean;



// Find some random player's house and attack it
procedure AttackRandomHouse(aGroup: Integer);
var
  allHouses: array of Integer;
  I: Integer;
begin
  allHouses := States.PlayerGetAllHouses(HUMAN_PLAYER);
  if Length(allHouses) = 0 then Exit;
  I := Utils.RandomI(Length(allHouses));
  Actions.GroupOrderAttackHouse(aGroup, allHouses[I]);
end;


procedure CreateNextWave;
var
  tr_type_medium: Integer;
  tr_type_heavy: Integer;
begin
  dir:= Utils.RandomI(4)  //attack direction randomized

    if dir = 0 then //North
      begin
        xcord := 66;
        ycord := 8;
        north_spawn := true;
      end;

    if dir = 1 then //West
      begin
        xcord := 10;
        ycord := 71;
        west_spawn := true;
      end;

    if dir = 2 then //South
      begin
        xcord := 74;
        ycord := 134;
        south_spawn := true;
      end;

    if dir = 3 then //East
      begin
        xcord := 133;
        ycord := 69;
        east_spawn := true;
      end;

    Actions.GiveGroup(GAULS_PLAYER, utMilitia, xcord, ycord, 6, waveNumber, waveNumber);
    Inc(waveGroups);

    if waveNumber > 14 then  //spawn randomized medium troop
      begin
        tr_type_medium:= Utils.RandomI(3) //Axe, Pike, Bow

        dir2:= Utils.RandomI(4)  //attack direction randomized

        if dir2 = 0 then //North
          begin
            xcord2 := 80;
            ycord2 := 13;
            north_spawn := true;
          end;

        if dir2 = 1 then //West
          begin
            xcord2 := 8;
            ycord2 := 61;
            west_spawn := true;
          end;

        if dir2 = 2 then //South
          begin
            xcord2 := 66;
            ycord2 := 134;
            south_spawn := true;
          end;

        if dir2 = 3 then //East
          begin
            xcord2 := 133;
            ycord2 := 63;
            east_spawn := true;
          end;

        if tr_type_medium = 0 then
          Actions.GiveGroup(GAULS_PLAYER, utAxeFighter, xcord2, ycord2, 6, waveNumber - 14, waveNumber - 14);
        if tr_type_medium = 1 then
          Actions.GiveGroup(GAULS_PLAYER, utPikeman, xcord2, ycord2, 6, waveNumber - 14, waveNumber - 14);
        if tr_type_medium = 2 then
          Actions.GiveGroup(GAULS_PLAYER, utBowman, xcord2, ycord2, 6, waveNumber - 14, waveNumber - 14);
      Inc(waveGroups);
      end;

      if waveNumber > 24 then
        begin
          tr_type_heavy:= Utils.RandomI(3)

          dir3:= Utils.RandomI(4)  //attack direction randomized

          if dir3 = 0 then //North
            begin
              xcord3 := 9;
              ycord3 := 83;
              north_spawn := true;
            end;

          if dir3 = 1 then //West
            begin
              xcord3 := 9;
              ycord3 := 83;
              west_spawn := true;
            end;

          if dir3 = 2 then //South
            begin
              xcord3 := 57;
              ycord3 := 134;
              south_spawn := true;
            end;

          if dir3 = 3 then //East
            begin
              xcord3 := 134;
              ycord3 := 76;
              east_spawn := true;
            end;

          if tr_type_heavy = 0 then
            Actions.GiveGroup(GAULS_PLAYER, utSwordsman, xcord3, ycord3, 6, waveNumber - 24, waveNumber - 24);
          if tr_type_heavy = 1 then
            Actions.GiveGroup(GAULS_PLAYER, utHallebardman, xcord3, ycord3, 6, waveNumber - 24, waveNumber - 24);
          if tr_type_heavy = 2 then
            Actions.GiveGroup(GAULS_PLAYER, utArbaletman, xcord3, ycord3, 6, waveNumber - 24, waveNumber - 24);
        Inc(waveGroups);
        end;


  // OrderIdleGroups will issue attack orders

  // Next wave will be tougher
Inc(waveNumber);
end;


procedure Feed;
var
  allUnits: array of Integer;
  I: Integer;
begin
  allUnits := States.PlayerGetAllUnits(GAULS_PLAYER);

  for I := 0 to High(allUnits) do
    Actions.UnitHungerSet(allUnits[I], States.UnitHungerMax);
end;


procedure CheckAlive; //Check if an attacking unit is alive
var
  allUnits: array of Integer;
  I: Integer;
begin
  allUnits := States.PlayerGetAllUnits(GAULS_PLAYER);

  for I := 0 to High(allUnits) do
    If I <> 0 then
      begin
        attacker_alive := true;
      end;
    If I = 0 then
      begin
        attacker_alive := false;
        north_spawn := false;
        west_spawn := false;
        south_spawn := false;
        east_spawn := false;
      end;
end;


procedure OrderIdleGroups;
var
  allGroups: array of Integer;
  I: Integer;
begin
  allGroups := States.PlayerGetAllGroups(GAULS_PLAYER);

  for I := 0 to High(allGroups) do
  if States.GroupIsIdle(allGroups[I]) then
    AttackRandomHouse(allGroups[I]);
end;



procedure UpdateObjective;
var
  allGroups: array of Integer;
begin
  // Assume that groups never link
  allGroups := States.PlayerGetAllGroups(GAULS_PLAYER);

  Actions.PlayerObjectiveUpdateText(HUMAN_PLAYER, objWaves1, 'Groups deflected - ' + IntToStr(waveGroups - Length(allGroups)));

  if attacker_alive then
    begin
      Actions.PlayerObjectiveUpdateText(HUMAN_PLAYER, objWaves2, '<$15>');
      if north_spawn then //North
        begin
          Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_n_obj, osActive)
        end;

      if west_spawn then //West
        begin
          Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_w_obj, osActive)
        end;

      if south_spawn then //South
        begin
          Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_s_obj, osActive)
        end;

      if east_spawn then //East
        begin
          Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_e_obj, osActive)
        end;
    end;

  if not attacker_alive then
    begin
      Actions.PlayerObjectiveUpdateText(HUMAN_PLAYER, objWaves2, '<$16>');
      Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_n_obj, osHidden)
      Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_w_obj, osHidden)
      Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_s_obj, osHidden)
      Actions.PlayerObjectiveUpdateStatus(HUMAN_PLAYER, dir_e_obj, osHidden)
    end;

end;


procedure OnMissionStart;
begin
  Actions.PlayerNameSet(DESERTERS_PLAYER, '<$2>');
  Actions.PlayerNameSet(GAULS_PLAYER, '<$3>');

  Actions.FogRevealAll(HUMAN_PLAYER)

  waveNumber := 1;
  waveGroups := 0;


  gametime_obj := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 0, osActive, '');
  objWaves1 := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 1, osActive, '');
  objWaves2 := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otMain, 2, osActive, '');
  dir_n_obj := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otAdditional, 0, osHidden, 'North!');
  dir_w_obj := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otAdditional, 0, osHidden, 'West!');
  dir_s_obj := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otAdditional, 0, osHidden, 'South!');
  dir_e_obj := Actions.PlayerObjectiveAdd(HUMAN_PLAYER, otAdditional, 0, osHidden, 'East!');
  UpdateObjective;

begin
 Actions.PlayerMessageOpen(0, '<$11>');
end;

end;


procedure OnTick(aTick: Integer);
var
  gametime: String;
begin
  if waveNumber < 25 then
    begin
    if (aTick mod WAVE_INTERVAL = 0) then
      begin
	    if not States.PlayerDefeated(HUMAN_PLAYER) then
	      CreateNextWave;
      end;
    end;
  if waveNumber >= 25 then
    begin
    if (aTick mod WAVE_INTERVAL_LATEGAME = 0) then
      begin
      if not States.PlayerDefeated(HUMAN_PLAYER) then
        CreateNextWave;
      end;
    end;


	// Feed even when defeated
  Feed;


  if aTick mod 10 = 0 then
    begin
      gametime := (Utils.TimeToString(aTick));
      Actions.PlayerObjectiveUpdateText(HUMAN_PLAYER, gametime_obj, 'Gametime:' +gametime);
      CheckAlive;
    end;


  if aTick mod 30 = 0 then
    begin
	   if not States.PlayerDefeated(HUMAN_PLAYER) then
	    OrderIdleGroups;
    end;


  if aTick mod 35 = 0 then
    begin
      UpdateObjective;
    end;
end;

procedure OnPlayerDefeated(aPlayer: Integer);
begin
  if aPlayer = 0 then
    Actions.PlayerMessageOpen(0, '<$12>');
end;
